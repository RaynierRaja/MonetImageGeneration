import torch
import torch.nn as nn


def generator_loss(pred):
    """
    Computes the generator loss, which measures how well the generator fools the discriminator.
    The goal of the generator is to generate images that are classified as real by the discriminator.
    
    Args:
    pred (tensor): The prediction made by the discriminator on the generated image.
    
    Returns:
    torch.Tensor: The computed generator loss.
    """
    bce_loss = nn.BCELoss()  # Binary Cross-Entropy loss, used for classification tasks
    
    # Target for the generator is '1' (real), since we want the discriminator to classify generated images as real
    target = torch.ones_like(pred)
    
    # Compute BCE loss between the discriminator's prediction and the real target (i.e., generator's output should look real)
    loss = bce_loss(pred, target)
    
    return loss


def discriminator_loss(real_pred, gen_pred):
    """
    Computes the discriminator loss, which measures how well the discriminator can distinguish between real and fake images.
    The discriminator should classify real images as real (target 1) and generated images as fake (target 0).
    
    Args:
    real_pred (tensor): The prediction made by the discriminator on real images.
    gen_pred (tensor): The prediction made by the discriminator on generated (fake) images.
    
    Returns:
    torch.Tensor: The total discriminator loss.
    """
    bce_loss = nn.BCELoss()  # Binary Cross-Entropy loss, used for classification tasks
    
    # Create target labels for real and fake images
    real_target = torch.ones_like(real_pred)  # Real images should be classified as '1' (real)
    gen_target = torch.zeros_like(gen_pred)   # Generated (fake) images should be classified as '0' (fake)
    
    # Calculate BCE loss for real images and fake images
    loss_real = bce_loss(real_pred, real_target)  # Loss when discriminator classifies real images
    loss_gen = bce_loss(gen_pred, gen_target)     # Loss when discriminator classifies generated images
    
    # Total discriminator loss is the sum of losses for real and fake images
    loss = loss_real + loss_gen
    
    return loss


def cycle_consistency_loss(img, cycled_img, LAMBDA = 10):
    """
    Computes the cycle consistency loss, which ensures that the generated image can be transformed
    back to the original image domain.
    
    Args:
    img (tensor): The original image.
    cycled_img (tensor): The cycled (reconstructed) image. (after applying transformation and re-transforming)
    LAMBDA (float): The weighting factor for the loss.
    
    Returns:
    torch.Tensor: The computed cycle consistency loss.
    """
    return torch.mean(torch.abs(img - cycled_img)) * LAMBDA


def identity_loss(img, gen_img, LAMBDA = 10):
    """
    Computes the identity loss, ensuring that the generator outputs the real image itself when
    fed a real image as input (used for preserving color and texture).
    
    Args:
    img (tensor): The real image.
    gen_img (tensor): The image generated by the generator (should be close to the real image).
    LAMBDA (float): The weighting factor for the loss.
    
    Returns:
    torch.Tensor: The computed identity loss.
    """
    return torch.mean(torch.abs(img - gen_img)) * LAMBDA * 0.5
